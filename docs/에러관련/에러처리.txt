/**
 * 계층별 에러 처리 및 데이터베이스 연결 관리 아키텍처 개선
 * 
 * 1. 계층 구조
 *   - Controller: HTTP 요청/응답 처리, API 엔드포인트 정의
 *   - Service: 비즈니스 로직, 트랜잭션 관리
 *   - Repository: 데이터 액세스, 쿼리 실행
 *   - Database: 데이터베이스 연결 및 기본 쿼리 작업
 * 
 * 2. 에러 처리 구조
 *   - BaseError: 모든 에러의 기본 클래스
 *   - DatabaseError: 데이터베이스 계층에서 발생하는 에러
 *   - RepositoryError: Repository 계층에서 발생하는 에러
 *   - ServiceError: Service 계층에서 발생하는 에러
 *   - ControllerError: Controller 계층에서 발생하는 에러
 *   - UtilError: Utility 계층에서 발생하는 에러
 * 
 * 3. 데이터베이스 연결 관리
 *   - DatabasePool: 데이터베이스 연결 풀 싱글톤 관리
 *   - DatabaseOperations: 기본 쿼리 실행 작업 제공
 *   - TransactionManager: 트랜잭션 관리 (Service 계층에서 사용)
 * 
 * 4. 기본 클래스
 *   - BaseRepository: Repository 계층의 기본 클래스
 *   - BaseService: Service 계층의 기본 클래스
 */

// 개선된 구조의 주요 포인트



/**
 * 조회 작업 코드 흐름 예시
 * 
 * ```
 * 1. Controller: getServer API 엔드포인트 요청 처리
 *    - HTTP 요청 파라미터 및 쿼리 추출
 *    - 필터 옵션 변환
 *    - Service 호출 및 응답 반환
 *    - 오류 발생 시 ControllerError로 변환 후 next(error)
 * 
 * 2. Service: getServerById 메소드 실행
 *    - 비즈니스 규칙 검증 (ID 형식 등)
 *    - Repository 호출 및 데이터 검증
 *    - 추가 정보 조회 및 데이터 조합
 *    - 오류 발생 시 ServiceError로 변환 후 throw
 * 
 * 3. Repository: findByServerId 메소드 실행
 *    - 쿼리 조건 구성
 *    - 데이터베이스 쿼리 실행
 *    - 결과 반환
 *    - 오류 발생 시 RepositoryError로 변환 후 throw
 * 
 * 4. Database: executeQuerySingle 함수 실행
 *    - 데이터베이스 연결 풀에서 쿼리 실행
 *    - 결과 반환
 *    - 오류 발생 시 DatabaseError로 변환 후 throw
 * ```
 */


// 기본 에러 파라미터 인터페이스
export interface ErrorParams {
  errorCode: ErrorCode // 서버 내부 에러 식별 코드
  layer: ErrorLayer //  에러가 발생한 계층
  method: string // 에러가 발생한 함수 이름
  message: string //  에러 메세지
  statusCode?: number //  HTTP 상태 코드, API 응답에 사용됨
  cause?: unknown //  에러 원인 ( 에러 원본 )
  metadata?: Record<string, any> // 에러와 관련된 추가 정보 객체
  request?: string // Database 에러에서 해당 쿼리 요청 함수 이름
  query?: string // Database 에러 발생시 실행한 쿼리
  params?: any[] // Database 에러 발생시 실행한 파라미터
}

에러 객체